name: Comprehensive 0day/PoC Monitor

on:
  schedule:
    - cron: '0 */3 * * *'  # ÊØè3Â∞èÊó∂ËøêË°å‰∏ÄÊ¨°
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 feedparser python-telegram-bot python-dotenv
          git clone https://github.com/yhy0/github-cve-monitor.git
          cd github-cve-monitor
          pip install -r requirements.txt
          cd ..
          
      - name: Run comprehensive monitor
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DINGTALK_WEBHOOK: ${{ secrets.DINGTALK_WEBHOOK }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          python << 'EOF'
          import requests
          from bs4 import BeautifulSoup
          import feedparser
          from telegram import Bot
          import os
          from datetime import datetime, timedelta
          
          # ÂàùÂßãÂåñÈÄöÁü•Ê∏†ÈÅì
          bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
          chat_id = os.getenv('TELEGRAM_CHAT_ID')
          
          def send_alert(message, platform='all'):
              if platform in ['all', 'slack'] and os.getenv('SLACK_WEBHOOK'):
                  requests.post(os.getenv('SLACK_WEBHOOK'), json={'text': message})
              if platform in ['all', 'telegram'] and chat_id:
                  bot.send_message(chat_id, message)
              if platform in ['all', 'dingtalk'] and os.getenv('DINGTALK_WEBHOOK'):
                  requests.post(os.getenv('DINGTALK_WEBHOOK'), json={'msgtype': 'text', 'text': {'content': message}})
              if platform in ['all', 'discord'] and os.getenv('DISCORD_WEBHOOK'):
                  requests.post(os.getenv('DISCORD_WEBHOOK'), json={'content': message})
          
          # 1. GitHub CVE ÁõëÊéß
          try:
              os.chdir('github-cve-monitor')
              import github_cve_monitor
              github_cve_monitor.main()
              os.chdir('..')
          except Exception as e:
              print(f"GitHub CVE monitor error: {str(e)}")
          
          # 2. RSS Âíå Twitter ÁõëÊéß
          RSS_FEEDS = [
              "https://thehackernews.com/feeds/posts/default",
              "https://www.exploit-db.com/rss.xml",
          ]
          
          TWITTER_KEYWORDS = ["0day", "PoC", "exploit"]
          NITTER_RSS = "https://nitter.net/search/rss?f=tweets&q=" + "+OR+".join(TWITTER_KEYWORDS)
          
          def check_rss(feed_url):
              feed = feedparser.parse(feed_url)
              for entry in feed.entries[:5]:
                  if any(keyword.lower() in entry.title.lower() for keyword in TWITTER_KEYWORDS):
                      send_alert(f"‚ö†Ô∏è 0day Alert: {entry.title}\n{entry.link}")
          
          check_rss(NITTER_RSS)
          for rss in RSS_FEEDS:
              check_rss(rss)
          
          # 3. NVD 0day ÁõëÊéß
          try:
              NVD_API = "https://services.nvd.nist.gov/rest/json/cves/2.0"
              today = datetime.now()
              yesterday = today - timedelta(days=1)
              params = {
                  "pubStartDate": yesterday.strftime("%Y-%m-%dT%H:%M:%S.000"),
                  "pubEndDate": today.strftime("%Y-%m-%dT%H:%M:%S.000"),
                  "keywordSearch": "0day OR exploit",
              }
              
              response = requests.get(NVD_API, params=params).json()
              for vuln in response.get("vulnerabilities", []):
                  cve_id = vuln["cve"]["id"]
                  description = vuln["cve"]["descriptions"][0]["value"]
                  if "0day" in description.lower() or "exploit" in description.lower():
                      severity = vuln["cve"].get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {}).get("baseScore", "N/A")
                      message = f"üö® New 0day CVE: {cve_id} (CVSS: {severity})\n{description}\nhttps://nvd.nist.gov/vuln/detail/{cve_id}"
                      send_alert(message)
          except Exception as e:
              print(f"NVD monitor error: {str(e)}")
          
          # 4. GitHub Ë∂ãÂäøÂÆâÂÖ®È°πÁõÆÁõëÊéß
          try:
              URL = "https://github.com/trending/security"
              response = requests.get(URL)
              soup = BeautifulSoup(response.text, "html.parser")
              repos = soup.select("article.Box-row")
          
              for repo in repos[:5]:
                  title = repo.select_one("h2 a").text.strip()
                  desc = repo.select_one("p") and repo.select_one("p").text.strip() or "No description"
                  link = "https://github.com" + repo.select_one("h2 a")["href"]
                  if "exploit" in title.lower() or "poc" in title.lower() or "0day" in desc.lower():
                      message = f"üìà Trending Security Repo: **{title}**\n{desc}\n{link}"
                      send_alert(message, 'telegram')
          except Exception as e:
              print(f"GitHub trending monitor error: {str(e)}")
          EOF
          
      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-results
          path: results.txt